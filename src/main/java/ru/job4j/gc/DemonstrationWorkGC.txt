
1- руками рассчитать сколько будет занимать памяти объект User user = new User(30,"Alexander");

 Заголовок: 16 байт
- Поле int age = 4 байта
- Поле String name:
  - Заголовок 16 байта
  - три поля int 12 байта
  - ссылка на массив char[] 4 байта
  - Выравнивание для кратности 8 = 0
   итого 32 байта
  -- массив char[]:
  -- Заголовок 16 байт
  -- элементы char 2 байта * количество символов (Alexander) 9шт = 18 байт
  -- Выравнивание для кратности 8 = 0
    итого 34 байта
- итого на строку 32 + 34 = 66 байт

ИТОГО под объект user выделяется = 86 байт памяти

2 - расчет памяти занимаемой данным объектом (без полей) User user = new User():
- Заголовок - 16 байт
ИТОГО под пустой(без полей) объект user будет выделено = 16 байт памяти


Объяснить поведение программы:

 * Вариант 1 - сборщик мусора не сработал.
- параметры -Xmx8m -Xms8m
- создаём в цикле 2000 объектов
- убран метод System.gc()
программа выполняется:
=== Environment state ===
Free: 2
Total: 4
Max: 4

 * Вариант 2 - сборщик мусора сработал.
- параметры -Xmx8m -Xms8m
- создаём в цикле 6000 объектов
- добавлен метод System.gc()
программа выполняется:
=== Environment state ===
Removed 1999 N 1999
Removed 1998 N 1998
Free: 2
Total: 4
Max: 4
Removed 1997 N 1997
Removed 1996 N 1996
Removed 1995 N 1995
Removed 1994 N 1994

В данном примере мы создали 1 объект с сильной ссылкой (user), и он будет существовать до выхода из программы. А также создается N объектов
в цикле без ссылок, которые будут определяться как мусор и удаляться при сборке.

При заполнении выделенной памяти, сборщик мусора запускает малую сборку мусора и удаляет объекты user
которые создавались в цикле и не имеют ссылок, из Eden региона молодого поколения. Перед удаляем объекта запускается метод
finalize() и выводит на консоль инф.

Малая сборка мусора удаляет объекты без ссылок, а выжившие объекты переносит в другое поколение
при достижении определенного порога заполненности кучи.